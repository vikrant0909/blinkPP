#define BLYNK_TEMPLATE_ID "TMPL3MdS2XcWX"
#define BLYNK_TEMPLATE_NAME "Pen Plotter"
#define BLYNK_AUTH_TOKEN "vUK8bHLceN0l-g08_OSmzZXCMdPt_CO3"

// Include necessary libraries
#include <Wire.h>
#include <SCMD.h> // Correct library for the SparkFun Serial Controlled Motor Driver
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>

// Auth Token from Blynk
char auth[] = BLYNK_AUTH_TOKEN;

// Your WiFi credentials
char ssid[] = "Hotspot";
char pass[] = "Akhil@123";

// Define motor driver object
SCMD motorDriver;

// Motor channels
#define MOTOR1 0
#define MOTOR2 1

// Define LED pins
#define LED_RED_PIN 12
#define LED_YELLOW_PIN 13

// Define servo motor
Servo myServo;
#define SERVO_PIN 11

// Define limit switch pins
#define Y_FRONT_LIMIT_PIN 8
#define Y_BACK_LIMIT_PIN 10
#define X_LEFT_LIMIT_PIN 4
#define X_RIGHT_LIMIT_PIN 6

void setup() {
  // Initialize the serial communication for debugging
  Serial.begin(115200);
  Serial.println("Serial communication started.");

  // Initialize the I2C bus
  Wire.begin();
  Serial.println("I2C bus initialized.");

  // Initialize the motor driver
  Serial.println("Initializing motor driver...");
  motorDriver.settings.commInterface = I2C_MODE;
  motorDriver.settings.I2CAddress = 0x5D;
  while (motorDriver.begin() != 0xA9) {
    Serial.println("ID mismatch, trying again");
    delay(500);
  }
  Serial.println("ID matches 0xA9");

  while (motorDriver.ready() == false) {
    Serial.println("Waiting for Motor Driver to be ready...");
    delay(500);
  }
  Serial.println("Motor Driver Ready.");

  while (motorDriver.busy());
  motorDriver.enable(); // Enable the motor driver

  // Debugging message
  Serial.println("Motor Driver enabled.");

  // Initialize LED pins
  pinMode(LED_RED_PIN, OUTPUT);
  digitalWrite(LED_RED_PIN, LOW);  // Initially off
  pinMode(LED_YELLOW_PIN, OUTPUT);
  digitalWrite(LED_YELLOW_PIN, LOW);  // Initially off
  Serial.println("LED pins initialized.");

  // Initialize servo motor
  myServo.attach(SERVO_PIN);
  Serial.println("Servo motor initialized.");

  // Initialize limit switch pins
  pinMode(Y_FRONT_LIMIT_PIN, INPUT_PULLUP);
  pinMode(Y_BACK_LIMIT_PIN, INPUT_PULLUP);
  pinMode(X_LEFT_LIMIT_PIN, INPUT_PULLUP);
  pinMode(X_RIGHT_LIMIT_PIN, INPUT_PULLUP);
  Serial.println("Limit switches initialized.");

  // Start Blynk
  Serial.println("Connecting to Blynk...");
  Blynk.begin(auth, ssid, pass);
  Serial.println("Connected to Blynk.");
}

// Function to control motor 1 speed from Blynk
BLYNK_WRITE(V1) {
  int speed = param.asInt();
  uint8_t direction = speed >= 0 ? 0 : 1; // 0 for forward, 1 for reverse
  motorDriver.setDrive(MOTOR1, direction, abs(speed)); // Channel 0 for motor 1
  Serial.print("Motor 1 Speed: ");
  Serial.print(speed);
  Serial.print(" Direction: ");
  Serial.println(direction == 0 ? "Forward" : "Reverse");
}

// Function to control motor 2 speed from Blynk
BLYNK_WRITE(V2) {
  int speed = param.asInt();
  uint8_t direction = speed >= 0 ? 0 : 1; // 0 for forward, 1 for reverse
  motorDriver.setDrive(MOTOR2, direction, abs(speed)); // Channel 1 for motor 2
  Serial.print("Motor 2 Speed: ");
  Serial.print(speed);
  Serial.print(" Direction: ");
  Serial.println(direction == 0 ? "Forward" : "Reverse");
}

// Function to control servo from Blynk V0
BLYNK_WRITE(V0) {
  int value = param.asInt();
  myServo.write(value);
  Serial.print("Servo Angle: ");
  Serial.println(value);
}

// Function to control LED from Blynk V4
BLYNK_WRITE(V4) {
  int value = param.asInt();
  digitalWrite(LED_RED_PIN, value);
  Serial.print("LED State: ");
  Serial.println(value == HIGH ? "ON" : "OFF");
}

void loop() {
  Blynk.run();

  // Check Y-axis limit switches
  if (digitalRead(Y_FRONT_LIMIT_PIN) == LOW) {
    // Y-axis front limit switch is pressed
    motorDriver.setDrive(MOTOR1, 1, 0); // Stop motor 1 (reverse to stop)
    Serial.println("Y-axis front limit reached.");
  }
  if (digitalRead(Y_BACK_LIMIT_PIN) == LOW) {
    // Y-axis back limit switch is pressed
    motorDriver.setDrive(MOTOR1, 0, 0); // Stop motor 1 (forward to stop)
    Serial.println("Y-axis back limit reached.");
  }

  // Check X-axis limit switches
  if (digitalRead(X_LEFT_LIMIT_PIN) == LOW) {
    // X-axis left limit switch is pressed
    motorDriver.setDrive(MOTOR2, 1, 0); // Stop motor 2 (reverse to stop)
    Serial.println("X-axis left limit reached.");
  }
  if (digitalRead(X_RIGHT_LIMIT_PIN) == LOW) {
    // X-axis right limit switch is pressed
    motorDriver.setDrive(MOTOR2, 0, 0); // Stop motor 2 (forward to stop)
    Serial.println("X-axis right limit reached.");
  }

  // Check if any limit switch is active and stop corresponding motors
  if (digitalRead(Y_FRONT_LIMIT_PIN) == LOW || digitalRead(Y_BACK_LIMIT_PIN) == LOW ||
      digitalRead(X_LEFT_LIMIT_PIN) == LOW || digitalRead(X_RIGHT_LIMIT_PIN) == LOW) {
    // At least one limit switch is active
    digitalWrite(LED_RED_PIN, LOW);   // Red LED off
    digitalWrite(LED_YELLOW_PIN, HIGH);  // Yellow LED on
  } else {
    // No limit switch active
    digitalWrite(LED_RED_PIN, HIGH);  // Red LED on
    digitalWrite(LED_YELLOW_PIN, LOW);   // Yellow LED off
  }

  delay(10); // Small delay to prevent excessive loop iteration
}
