// Libraries for Blynk and ESP32
#define BLYNK_TEMPLATE_ID "TMPL3MdS2XcWX"
#define BLYNK_TEMPLATE_NAME "Pen Plotter"
#define BLYNK_AUTH_TOKEN "vUK8bHLceN0l-g08_OSmzZXCMdPt_CO3"

#include <Wire.h>
#include <SCMD.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>
#include <LiquidCrystal_I2C.h>

// WiFi credentials
char ssid[] = "Hotspot";
char pass[] = "Akhil@123";

// Motor driver setup
SCMD motorDriver;
Servo myServo;
Servo penServo; // Declare pen servo motor

#define SERVO_PIN 11

// Motor channels
#define MOTOR1 0
#define MOTOR2 1

// LED pin
#define LED_PIN 12

// LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Pen plotter constants and variables
#define X_AXIS_MOTOR 1
#define Y_AXIS_MOTOR 0
#define X_LIMIT_SWITCH_LEFT 14
#define Y_LIMIT_SWITCH_BACK 15
#define RED_LED 13
#define YELLOW_LED 12
#define PEN_SERVO_PIN 11

#define MOTOR_SPEED 100
#define MOTOR_SPEEDX 107
#define MOTOR_SPEED_SLOW 107
int diagonalSpeedX = 102;
int diagonalSpeedY = 101;
int diagonalSpeedX1 = 95;
int diagonalSpeedY1 = 99;

// Blynk authentication token
char auth[] = BLYNK_AUTH_TOKEN;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(115200);
  Serial.println("Serial communication started.");

  // Initialize I2C bus
  Wire.begin();
  Serial.println("I2C bus initialized.");

  // Initialize motor driver
  Serial.println("Initializing motor driver...");
  motorDriver.settings.commInterface = I2C_MODE;
  motorDriver.settings.I2CAddress = 0x5D;
  while (motorDriver.begin() != 0xA9) {
    Serial.println("ID mismatch, trying again");
    delay(500);
  }
  Serial.println("ID matches 0xA9");
  while (motorDriver.ready() == false) {
    Serial.println("Waiting for Motor Driver to be ready...");
    delay(500);
  }
  Serial.println("Motor Driver Ready.");
  while (motorDriver.busy());
  motorDriver.enable(); 

  // Initialize LED pin
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  Serial.println("LED pin initialized.");

  // Initialize servo motors
  myServo.attach(SERVO_PIN);
  penServo.attach(PEN_SERVO_PIN); // Attach pen servo motor
  Serial.println("Servo motors initialized.");

  // Initialize LCD
  lcd.begin();
  lcd.backlight();

  // Start Blynk
  Serial.println("Connecting to Blynk...");
  Blynk.begin(auth, ssid, pass);
  Serial.println("Connected to Blynk.");
}

// Blynk functions to control motors and servo
BLYNK_WRITE(V1) {
  int speed = param.asInt();
  uint8_t direction = speed >= 0 ? 0 : 1;
  motorDriver.setDrive(MOTOR1, direction, abs(speed));
  Serial.print("Motor 1 Speed: ");
  Serial.print(speed);
  Serial.print(" Direction: ");
  Serial.println(direction == 0 ? "Forward" : "Reverse");
}

BLYNK_WRITE(V2) {
  int speed = param.asInt();
  uint8_t direction = speed >= 0 ? 0 : 1;
  motorDriver.setDrive(MOTOR2, direction, abs(speed));
  Serial.print("Motor 2 Speed: ");
  Serial.print(speed);
  Serial.print(" Direction: ");
  Serial.println(direction == 0 ? "Forward" : "Reverse");
}

BLYNK_WRITE(V0) {
  int value = param.asInt();
  myServo.write(value);
  Serial.print("Servo Angle: ");
  Serial.println(value);
}

BLYNK_WRITE(V4) {
  int value = param.asInt();
  digitalWrite(LED_PIN, value);
  Serial.print("LED State: ");
  Serial.println(value == HIGH ? "ON" : "OFF");
}

// Function to draw Nikolaus house
void drawNikolausHouse() {
  float startX = 0;
  float startY = 0;

  digitalWrite(RED_LED, LOW);
  digitalWrite(YELLOW_LED, HIGH);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Starting Drawing");
  lcd.setCursor(0, 1);
  lcd.print("Nikolaus House...");

  moveToSimultaneously(startX, startY, startX - 50, startY - 50, MOTOR_SPEEDX, MOTOR_SPEED);
  delay(1000);
  moveToSimultaneously(startX - 50, startY - 50, startX - 50, startY - 100, MOTOR_SPEEDX, MOTOR_SPEED);
  delay(1000);
  penDown();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Drawing Nikolaus");
  lcd.setCursor(0, 1);
  lcd.print("House.");
  delay(1000);
  moveToSimultaneously(startX - 50, startY - 100, startX - 100, startY - 100, MOTOR_SPEEDX, MOTOR_SPEED);
  delay(1000);
  moveToSimultaneously(startX - 100, startY - 100, startX - 100, startY - 50, MOTOR_SPEEDX, MOTOR_SPEED);
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Drawing Nikolaus");
  lcd.setCursor(0, 1);
  lcd.print("House..");
  moveToSimultaneously(startX - 100, startY - 50, startX - 75, startY - 25, diagonalSpeedX, diagonalSpeedY);
  delay(1000);
  moveToSimultaneously(startX - 75, startY - 25, startX - 50, startY - 50, diagonalSpeedX, diagonalSpeedY);
  delay(1000);
  moveToSimultaneously(startX - 50, startY - 50, startX - 100, startY - 50, MOTOR_SPEEDX, MOTOR_SPEED);
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Drawing Nikolaus");
  lcd.setCursor(0, 1);
  lcd.print("House...");
  moveToSimultaneously(startX - 100, startY - 50, startX - 50, startY - 100, diagonalSpeedX1, diagonalSpeedY1);
  delay(1000);
  moveToSimultaneously(startX - 50, startY - 100, startX - 50, startY - 50, MOTOR_SPEEDX, MOTOR_SPEED);
  delay(1000);
  moveToSimultaneously(startX - 50, startY - 50, startX - 100, startY - 100, diagonalSpeedX1, diagonalSpeedY1);
  delay(1000);
  penUp();
  delay(1000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("HOUSE BUILT!");
  delay(1000);
  digitalWrite(RED_LED, HIGH);
  digitalWrite(YELLOW_LED, LOW);
}

// Function to move motors simultaneously
void moveToSimultaneously(int startX, int startY, int endX, int endY, int speedX, int speedY) {
  Serial.print("Moving to coordinates: ");
  Serial.print(endX);
  Serial.print(", ");
  Serial.println(endY);

  int deltaX = endX - startX;
  int deltaY = endY - startY;
  int steps = max(abs(deltaX), abs(deltaY));
  float stepX = deltaX / (float)steps;
  float stepY = deltaY / (float)steps;

  bool isDiagonal = (deltaX != 0 && deltaY != 0);

  for (int i = 0; i < steps; i++) {
    int currentSpeedX = isDiagonal ? speedX : MOTOR_SPEEDX;
    int currentSpeedY = isDiagonal ? speedY : MOTOR_SPEED;

    if (stepX != 0) {
      motorDriver.setDrive(X_AXIS_MOTOR, stepX > 0 ? 0 : 1, currentSpeedX);
    }

    if (stepY != 0) {
      motorDriver.setDrive(Y_AXIS_MOTOR, stepY > 0 ? 1 : 0, currentSpeedY);
    }

    delay(10);
    motorDriver.setDrive(X_AXIS_MOTOR, 0, 0);
    motorDriver.setDrive(Y_AXIS_MOTOR, 0, 0);

    startX += stepX;
    startY += stepY;
  }

  Serial.println("Movement complete");
}

// Function to raise pen
void penUp() {
  penServo.write(110);
  delay(1000);
  Serial.println("Pen up");
}

// Function to lower pen
void penDown() {
  penServo.write(0);
  delay(1000);
  Serial.println("Pen down");
}

void loop() {
  Blynk.run();
}
